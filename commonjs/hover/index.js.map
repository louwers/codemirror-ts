{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/hover/index.ts"],"names":[],"mappings":";;;AAAA,2CAK0B;AAE1B,+CAAoD;AAQpD,MAAM,eAAe,GAAoB,CAAC,IAAe,EAAE,EAAE;IAC3D,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC1C,IAAI,IAAI,CAAC,SAAS,EAAE,YAAY,EAAE;QAChC,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE;YAC5C,MAAM,IAAI,GAAG,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;YAC7D,IAAI,CAAC,SAAS,GAAG,cAAc,IAAI,CAAC,IAAI,EAAE,CAAC;YAC3C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC;SAC5B;KACF;IACD,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AACtB,CAAC,CAAC;AAEF,SAAgB,OAAO,CAAC,EACtB,GAAG,EACH,IAAI,EACJ,aAAa,GAAG,eAAe,GAKhC;IACC,OAAO,IAAA,mBAAY,EAAC,KAAK,EAAE,IAAI,EAAE,GAAG,EAA2B,EAAE;QAC/D,MAAM,SAAS,GAAG,IAAA,sBAAQ,EAAC;YACzB,GAAG;YACH,IAAI;YACJ,GAAG;SACJ,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS;YAAE,OAAO,IAAI,CAAC;QAE5B,OAAO;YACL,GAAG,EAAE,SAAS,CAAC,KAAK;YACpB,GAAG,EAAE,SAAS,CAAC,GAAG;YAClB,MAAM,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC;SAC7C,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC;AAxBD,0BAwBC;AAED,SAAgB,aAAa,CAAC,EAC5B,MAAM,EACN,IAAI,EACJ,aAAa,GAAG,eAAe,GAOhC;IACC,OAAO,IAAA,mBAAY,EAAC,KAAK,EAAE,IAAI,EAAE,GAAG,EAA2B,EAAE;QAC/D,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC;YACtC,IAAI;YACJ,GAAG;SACJ,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS;YAAE,OAAO,IAAI,CAAC;QAE5B,OAAO;YACL,GAAG,EAAE,SAAS,CAAC,KAAK;YACpB,GAAG,EAAE,SAAS,CAAC,GAAG;YAClB,MAAM,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC;SAC7C,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC;AAzBD,sCAyBC","sourcesContent":["import {\n  EditorView,\n  Tooltip,\n  TooltipView,\n  hoverTooltip,\n} from \"@codemirror/view\";\nimport { VirtualTypeScriptEnvironment } from \"@typescript/vfs\";\nimport { HoverInfo, getHover } from \"./getHover.js\";\nimport * as Comlink from \"comlink\";\n\nexport type TooltipRenderer = (\n  arg0: HoverInfo,\n  editorView: EditorView,\n) => TooltipView;\n\nconst defaultRenderer: TooltipRenderer = (info: HoverInfo) => {\n  const div = document.createElement(\"div\");\n  if (info.quickInfo?.displayParts) {\n    for (let part of info.quickInfo.displayParts) {\n      const span = div.appendChild(document.createElement(\"span\"));\n      span.className = `quick-info-${part.kind}`;\n      span.innerText = part.text;\n    }\n  }\n  return { dom: div };\n};\n\nexport function tsHover({\n  env,\n  path,\n  renderTooltip = defaultRenderer,\n}: {\n  env: VirtualTypeScriptEnvironment;\n  path: string;\n  renderTooltip?: TooltipRenderer;\n}) {\n  return hoverTooltip(async (view, pos): Promise<Tooltip | null> => {\n    const hoverData = getHover({\n      env,\n      path,\n      pos,\n    });\n\n    if (!hoverData) return null;\n\n    return {\n      pos: hoverData.start,\n      end: hoverData.end,\n      create: () => renderTooltip(hoverData, view),\n    };\n  });\n}\n\nexport function tsHoverWorker({\n  worker,\n  path,\n  renderTooltip = defaultRenderer,\n}: {\n  worker: Comlink.Remote<{\n    getHover: ({ path, pos }: { path: string; pos: number }) => HoverInfo;\n  }>;\n  path: string;\n  renderTooltip?: TooltipRenderer;\n}) {\n  return hoverTooltip(async (view, pos): Promise<Tooltip | null> => {\n    const hoverData = await worker.getHover({\n      path,\n      pos,\n    });\n\n    if (!hoverData) return null;\n\n    return {\n      pos: hoverData.start,\n      end: hoverData.end,\n      create: () => renderTooltip(hoverData, view),\n    };\n  });\n}\n"]}