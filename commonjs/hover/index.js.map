{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/hover/index.ts"],"names":[],"mappings":";;;AAAA,2CAK0B;AAenB,KAAK,UAAU,QAAQ,CAAC,EAC7B,GAAG,EACH,IAAI,EACJ,GAAG,GAKJ;IACC,MAAM,SAAS,GAAG,GAAG,CAAC;IACtB,IAAI,SAAS,KAAK,IAAI;QAAE,OAAO,IAAI,CAAC;IAEpC,MAAM,SAAS,GAAG,GAAG,CAAC,eAAe,CAAC,sBAAsB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAC9E,IAAI,CAAC,SAAS;QAAE,OAAO,IAAI,CAAC;IAE5B,MAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC;IAEvC,MAAM,OAAO,GACX,GAAG,CAAC,eAAe,CAAC,2BAA2B,CAAC,IAAI,EAAE,SAAS,CAAC;QAChE,GAAG,CAAC,eAAe,CAAC,uBAAuB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAE/D,OAAO;QACL,KAAK;QACL,GAAG,EAAE,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC,MAAM;QACtC,OAAO;QACP,SAAS;KACV,CAAC;AACJ,CAAC;AA3BD,4BA2BC;AAOD,MAAM,eAAe,GAAoB,CAAC,IAAe,EAAE,EAAE;IAC3D,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC1C,IAAI,IAAI,CAAC,SAAS,EAAE,YAAY,EAAE;QAChC,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE;YAC5C,MAAM,IAAI,GAAG,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;YAC7D,IAAI,CAAC,SAAS,GAAG,cAAc,IAAI,CAAC,IAAI,EAAE,CAAC;YAC3C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC;SAC5B;KACF;IACD,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AACtB,CAAC,CAAC;AAEF,SAAgB,OAAO,CAAC,EACtB,GAAG,EACH,IAAI,EACJ,aAAa,GAAG,eAAe,GAKhC;IACC,OAAO,IAAA,mBAAY,EAAC,KAAK,EAAE,IAAI,EAAE,GAAG,EAA2B,EAAE;QAC/D,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC;YAC/B,GAAG;YACH,IAAI;YACJ,GAAG;SACJ,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS;YAAE,OAAO,IAAI,CAAC;QAE5B,OAAO;YACL,GAAG,EAAE,SAAS,CAAC,KAAK;YACpB,GAAG,EAAE,SAAS,CAAC,GAAG;YAClB,MAAM,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC;SAC7C,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC;AAxBD,0BAwBC","sourcesContent":["import {\n  EditorView,\n  Tooltip,\n  TooltipView,\n  hoverTooltip,\n} from \"@codemirror/view\";\nimport { VirtualTypeScriptEnvironment } from \"@typescript/vfs\";\nimport { type QuickInfo, type DefinitionInfo } from \"typescript\";\n\n/**\n * This information is passed to the API consumer to allow\n * them to create tooltips however they wish.\n */\nexport interface HoverInfo {\n  start: number;\n  end: number;\n  typeDef: readonly DefinitionInfo[] | undefined;\n  quickInfo: QuickInfo | undefined;\n}\n\nexport async function getHover({\n  env,\n  path,\n  pos,\n}: {\n  env: VirtualTypeScriptEnvironment;\n  path: string;\n  pos: number;\n}): Promise<HoverInfo | null> {\n  const sourcePos = pos;\n  if (sourcePos === null) return null;\n\n  const quickInfo = env.languageService.getQuickInfoAtPosition(path, sourcePos);\n  if (!quickInfo) return null;\n\n  const start = quickInfo.textSpan.start;\n\n  const typeDef =\n    env.languageService.getTypeDefinitionAtPosition(path, sourcePos) ??\n    env.languageService.getDefinitionAtPosition(path, sourcePos);\n\n  return {\n    start,\n    end: start + quickInfo.textSpan.length,\n    typeDef,\n    quickInfo,\n  };\n}\n\nexport type TooltipRenderer = (\n  arg0: HoverInfo,\n  editorView: EditorView,\n) => TooltipView;\n\nconst defaultRenderer: TooltipRenderer = (info: HoverInfo) => {\n  const div = document.createElement(\"div\");\n  if (info.quickInfo?.displayParts) {\n    for (let part of info.quickInfo.displayParts) {\n      const span = div.appendChild(document.createElement(\"span\"));\n      span.className = `quick-info-${part.kind}`;\n      span.innerText = part.text;\n    }\n  }\n  return { dom: div };\n};\n\nexport function tsHover({\n  env,\n  path,\n  renderTooltip = defaultRenderer,\n}: {\n  env: VirtualTypeScriptEnvironment;\n  path: string;\n  renderTooltip?: TooltipRenderer;\n}) {\n  return hoverTooltip(async (view, pos): Promise<Tooltip | null> => {\n    const hoverData = await getHover({\n      env,\n      path,\n      pos,\n    });\n\n    if (!hoverData) return null;\n\n    return {\n      pos: hoverData.start,\n      end: hoverData.end,\n      create: () => renderTooltip(hoverData, view),\n    };\n  });\n}\n"]}