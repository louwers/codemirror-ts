{"version":3,"file":"getLints.js","sourceRoot":"","sources":["../../../src/lint/getLints.ts"],"names":[],"mappings":";;;AAAA,yCAA+E;AAG/E,SAAgB,QAAQ,CAAC,EACvB,GAAG,EACH,IAAI,GAIL;IACC,sDAAsD;IACtD,MAAM,MAAM,GAAG,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IACvC,IAAI,CAAC,MAAM;QAAE,OAAO,EAAE,CAAC;IAEvB,MAAM,mBAAmB,GAAG,GAAG,CAAC,eAAe,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;IAC9E,MAAM,mBAAmB,GAAG,GAAG,CAAC,eAAe,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;IAE7E,MAAM,WAAW,GAAG,CAAC,GAAG,mBAAmB,EAAE,GAAG,mBAAmB,CAAC,CAAC,MAAM,CACzE,mCAAwB,CACzB,CAAC;IAEF,OAAO,WAAW,CAAC,GAAG,CAAC,kCAAuB,CAAC,CAAC;AAClD,CAAC;AAnBD,4BAmBC","sourcesContent":["import { convertTSDiagnosticToCM, isDiagnosticWithLocation } from \"./utils.js\";\nimport { VirtualTypeScriptEnvironment } from \"@typescript/vfs\";\n\nexport function getLints({\n  env,\n  path,\n}: {\n  env: VirtualTypeScriptEnvironment;\n  path: string;\n}) {\n  // Don't crash if the relevant file isn't created yet.\n  const exists = env.getSourceFile(path);\n  if (!exists) return [];\n\n  const syntaticDiagnostics = env.languageService.getSyntacticDiagnostics(path);\n  const semanticDiagnostics = env.languageService.getSemanticDiagnostics(path);\n\n  const diagnostics = [...syntaticDiagnostics, ...semanticDiagnostics].filter(\n    isDiagnosticWithLocation,\n  );\n\n  return diagnostics.map(convertTSDiagnosticToCM);\n}\n"]}