{"version":3,"file":"tsSyncWorker.js","sourceRoot":"","sources":["../../../src/sync/tsSyncWorker.ts"],"names":[],"mappings":";;;AAAA,2CAA8C;AAO9C;;GAEG;AACH,SAAgB,YAAY,CAAC,EAC3B,MAAM,EACN,IAAI,GAIL;IACC,2DAA2D;IAC3D,4DAA4D;IAC5D,iEAAiE;IACjE,6DAA6D;IAC7D,8DAA8D;IAC9D,8CAA8C;IAC9C,IAAI,KAAK,GAAG,IAAI,CAAC;IACjB,OAAO,iBAAU,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE,EAAE;QAC7C,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,CAAC,KAAK;YAAE,OAAO;QACzC,KAAK,GAAG,KAAK,CAAC;QAEd,MAAM,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;AACL,CAAC;AApBD,oCAoBC","sourcesContent":["import { EditorView } from \"@codemirror/view\";\nimport * as Comlink from \"comlink\";\n\ntype WorkerShape = Comlink.Remote<{\n  updateFile({ path, code }: { path: string; code: string }): void;\n}>;\n\n/**\n * Sync updates from CodeMirror to the worker.\n */\nexport function tsSyncWorker({\n  worker,\n  path,\n}: {\n  worker: WorkerShape;\n  path: string;\n}) {\n  // TODO: this is a weak solution to the cold start problem.\n  // If you boot up a CodeMirror instance, we want the initial\n  // value to get loaded into CodeMirror. We do get a change event,\n  // but it surprisingly doesn't have `docChanged: true` on it,\n  // so this is a rough heuristic to just accept the first event\n  // regardless of whether it looks significant.\n  let first = true;\n  return EditorView.updateListener.of((update) => {\n    if (!update.docChanged && !first) return;\n    first = false;\n\n    worker.updateFile({ path, code: update.state.doc.toString() });\n  });\n}\n"]}