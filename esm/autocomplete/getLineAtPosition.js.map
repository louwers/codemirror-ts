{"version":3,"file":"getLineAtPosition.js","sourceRoot":"","sources":["../../../src/autocomplete/getLineAtPosition.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AACH,MAAM,UAAU,iBAAiB,CAAC,IAAY,EAAE,QAAgB;IAC9D,+CAA+C;IAC/C,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IACtD,IAAI,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACtC,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE;QACb,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;KAClB;IACD,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAClC,OAAO;QACL,IAAI;QACJ,EAAE;QACF,IAAI;KACL,CAAC;AACJ,CAAC","sourcesContent":["/**\n * TODO: confirm that this is necessary; it may be possible\n * and more efficient to get the line from CodeMirror, though\n * that would mean it probably doesn't mix well with the approach\n * of persisting code in the TS enviroment.\n */\nexport function getLineAtPosition(code: string, position: number) {\n  // lineStart is the index of line break or zero\n  const from = code.lastIndexOf(\"\\n\", position - 1) + 1;\n  let to = code.indexOf(\"\\n\", position);\n  if (to === -1) {\n    to = code.length;\n  }\n  const text = code.slice(from, to);\n  return {\n    from,\n    to,\n    text,\n  };\n}\n"]}