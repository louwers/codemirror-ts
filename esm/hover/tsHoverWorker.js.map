{"version":3,"file":"tsHoverWorker.js","sourceRoot":"","sources":["../../../src/hover/tsHoverWorker.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAW,MAAM,kBAAkB,CAAC;AAEzD,OAAO,EAAE,eAAe,EAAwB,MAAM,oBAAoB,CAAC;AAE3E,MAAM,UAAU,aAAa,CAAC,EAC5B,MAAM,EACN,IAAI,EACJ,aAAa,GAAG,eAAe,GAKhC;IACC,OAAO,YAAY,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,EAA2B,EAAE;QAC/D,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC;YACtC,IAAI;YACJ,GAAG;SACJ,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS;YAAE,OAAO,IAAI,CAAC;QAE5B,OAAO;YACL,GAAG,EAAE,SAAS,CAAC,KAAK;YACpB,GAAG,EAAE,SAAS,CAAC,GAAG;YAClB,MAAM,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC;SAC7C,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { hoverTooltip, Tooltip } from \"@codemirror/view\";\nimport { type WorkerShape } from \"../worker.js\";\nimport { defaultRenderer, type TooltipRenderer } from \"./renderTooltip.js\";\n\nexport function tsHoverWorker({\n  worker,\n  path,\n  renderTooltip = defaultRenderer,\n}: {\n  worker: WorkerShape;\n  path: string;\n  renderTooltip?: TooltipRenderer;\n}) {\n  return hoverTooltip(async (view, pos): Promise<Tooltip | null> => {\n    const hoverData = await worker.getHover({\n      path,\n      pos,\n    });\n\n    if (!hoverData) return null;\n\n    return {\n      pos: hoverData.start,\n      end: hoverData.end,\n      create: () => renderTooltip(hoverData, view),\n    };\n  });\n}\n"]}