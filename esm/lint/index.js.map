{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/lint/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAc,MAAM,kBAAkB,CAAC;AAEtD,OAAO,EAAE,uBAAuB,EAAE,wBAAwB,EAAE,MAAM,YAAY,CAAC;AAE/E,MAAM,UAAU,QAAQ,CAAC,EACvB,GAAG,EACH,IAAI,GAIL;IACC,sDAAsD;IACtD,MAAM,MAAM,GAAG,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IACvC,IAAI,CAAC,MAAM;QAAE,OAAO,EAAE,CAAC;IAEvB,MAAM,mBAAmB,GAAG,GAAG,CAAC,eAAe,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;IAC9E,MAAM,mBAAmB,GAAG,GAAG,CAAC,eAAe,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;IAE7E,MAAM,WAAW,GAAG,CAAC,GAAG,mBAAmB,EAAE,GAAG,mBAAmB,CAAC,CAAC,MAAM,CACzE,wBAAwB,CACzB,CAAC;IAEF,OAAO,WAAW,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;AAClD,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,EACvB,GAAG,EACH,IAAI,GAIL;IACC,OAAO,MAAM,CAAC,KAAK,EAAE,IAAI,EAAkC,EAAE;QAC3D,OAAO,QAAQ,CAAC;YACd,GAAG;YACH,IAAI;SACL,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { linter, Diagnostic } from \"@codemirror/lint\";\nimport { VirtualTypeScriptEnvironment } from \"@typescript/vfs\";\nimport { convertTSDiagnosticToCM, isDiagnosticWithLocation } from \"./utils.js\";\n\nexport function getLints({\n  env,\n  path,\n}: {\n  env: VirtualTypeScriptEnvironment;\n  path: string;\n}) {\n  // Don't crash if the relevant file isn't created yet.\n  const exists = env.getSourceFile(path);\n  if (!exists) return [];\n\n  const syntaticDiagnostics = env.languageService.getSyntacticDiagnostics(path);\n  const semanticDiagnostics = env.languageService.getSemanticDiagnostics(path);\n\n  const diagnostics = [...syntaticDiagnostics, ...semanticDiagnostics].filter(\n    isDiagnosticWithLocation,\n  );\n\n  return diagnostics.map(convertTSDiagnosticToCM);\n}\n\nexport function tsLinter({\n  env,\n  path,\n}: {\n  env: VirtualTypeScriptEnvironment;\n  path: string;\n}) {\n  return linter(async (view): Promise<readonly Diagnostic[]> => {\n    return getLints({\n      env,\n      path,\n    });\n  });\n}\n"]}