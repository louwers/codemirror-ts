{"version":3,"file":"createWorker.js","sourceRoot":"","sources":["../../../src/worker/createWorker.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,kBAAkB,EAAE,MAAM,mBAAmB,CAAC;AACvD,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAE/C,OAAO,EAAE,iBAAiB,EAAE,MAAM,sCAAsC,CAAC;AACzE,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAKhD,MAAM,UAAU,YAAY,CAC1B,WAEyC;IAEzC,IAAI,GAAiC,CAAC;IAEtC,OAAO;QACL,KAAK,CAAC,UAAU;YACd,GAAG,GAAG,MAAM,WAAW,EAAE,CAAC;QAC5B,CAAC;QACD,UAAU,CAAC,EAAE,IAAI,EAAE,IAAI,EAAkC;YACvD,IAAI,CAAC,GAAG;gBAAE,OAAO;YACjB,kBAAkB,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACtC,CAAC;QACD,QAAQ,CAAC,EAAE,IAAI,EAAoB;YACjC,IAAI,CAAC,GAAG;gBAAE,OAAO,EAAE,CAAC;YACpB,OAAO,QAAQ,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;QACjC,CAAC;QACD,iBAAiB,CAAC,EAChB,IAAI,EACJ,OAAO,GAIR;YACC,IAAI,CAAC,GAAG;gBAAE,OAAO,IAAI,CAAC;YACtB,OAAO,iBAAiB,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;QACnD,CAAC;QACD,QAAQ,CAAC,EAAE,IAAI,EAAE,GAAG,EAAiC;YACnD,IAAI,CAAC,GAAG;gBAAE,OAAO;YACjB,OAAO,QAAQ,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;QACtC,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { VirtualTypeScriptEnvironment } from \"@typescript/vfs\";\nimport { createOrUpdateFile } from \"../sync/update.js\";\nimport { getLints } from \"../lint/getLints.js\";\nimport { type CompletionContext } from \"@codemirror/autocomplete\";\nimport { getAutocompletion } from \"../autocomplete/getAutocompletion.js\";\nimport { getHover } from \"../hover/getHover.js\";\nimport { type Remote } from \"comlink\";\n\nexport type WorkerShape = Remote<ReturnType<typeof createWorker>>;\n\nexport function createWorker(\n  initializer: () =>\n    | VirtualTypeScriptEnvironment\n    | Promise<VirtualTypeScriptEnvironment>,\n) {\n  let env: VirtualTypeScriptEnvironment;\n\n  return {\n    async initialize() {\n      env = await initializer();\n    },\n    updateFile({ path, code }: { path: string; code: string }) {\n      if (!env) return;\n      createOrUpdateFile(env, path, code);\n    },\n    getLints({ path }: { path: string }) {\n      if (!env) return [];\n      return getLints({ env, path });\n    },\n    getAutocompletion({\n      path,\n      context,\n    }: {\n      path: string;\n      context: Pick<CompletionContext, \"pos\" | \"explicit\">;\n    }) {\n      if (!env) return null;\n      return getAutocompletion({ env, path, context });\n    },\n    getHover({ path, pos }: { path: string; pos: number }) {\n      if (!env) return;\n      return getHover({ env, path, pos });\n    },\n  };\n}\n"]}